"Cacheable Spring Boot микросервис для получения облигаций с Мосбиржы"
https://www.youtube.com/watch?v=9wIa0oceDyw

В этом видео пишу кешируемый микросервис на Spring Boot для получения облигаций с Мосбиржы.
Запросы кидаю с помощью OpenFeign. Кеш реализован с помощью Spring Cache + Caffeine (под капотом).
Spring Cache - это абстракция, а реализацией будет Caffeine.
Библиотека Caffeine даст возможность установить время жизни кэша, установим 1 час.
Кэш позволит снизить количество запросов к Бирже. Запрашивать Биржу более 5 раз за 1 час нельзя,
поэтому и ставим кэш. Ну а также кэш ускоряет обработку запросов.

Кидаем запросы на МосБиржу с помощью Фейна, получаем из биржи некую xml, парсим её,
и кешируем.



После запуска приложения выходим в браузер, переходим на страницу swagger - localhost:8005/swagger-ui.html
И на странице видим методы нашего контроллера. А так же можно задавать параметры для наших контроллеров,
по аналогии с Postman.

Тикеры и фиджики здесь имеют одно и то же значение.

"getBondsFromMoex"
 POST /bonds/getBondsByTickers @RequestBody TickersDto tickersDto
{
  "tickers": [
    "RU000A0JNYN1", "RU000A100A66", "RU000A0ZYLC4"
  ]
}
Ответ:
{
  "stocks": [
    {
      "ticker": "RU000A0JNYN1",
      "figi": "RU000A0JNYN1",
      "name": "МГор48-об",
      "type": "Bond",
      "currency": "RUB",
      "source": "MOEX"
    },
    {
      "ticker": "RU000A0ZYLC4",
      "figi": "RU000A0ZYLC4",
      "name": "Газпнф1P4R",
      "type": "Bond",
      "currency": "RUB",
      "source": "MOEX"
    },
    {
      "ticker": "RU000A100A66",
      "figi": "RU000A100A66",
      "name": "МТС 1P-09",
      "type": "Bond",
      "currency": "RUB",
      "source": "MOEX"
    }
  ]
}



"getPricesByFigies"
 POST /bonds/prices @RequestBody FigiesDto figiesDto
{
  "figies": [
    "RU000A0JNYN1", "RU000A100A66", "RU000A0ZYLC4"
  ]
}
Ответ:
{
  "prices": [
    {
      "figi": "RU000A0JNYN1",
      "price": 994.5
    },
    {
      "figi": "RU000A0ZYLC4",
      "price": 934.2
    },
    {
      "figi": "RU000A100A66",
      "price": 955.1
    }
  ]
}


О работе с фейн клиентом хорошо описано в https://www.baeldung.com/spring-cloud-openfeign

----------------------------------------------------------------------------------------------------
Добавление кэша.
Добавим его в BondService, чтобы закешировать запросы, т.к. по этим двум запросам ходим в МосБиржу и
получаем коллекцию и можем её закэшировать.
Объявим аннотацию @Cacheable. value = "corps" - это даем название кэшируемой коллекции.
Так же не забываем включить кэширование в MoexStockServiceApplication

Когда мы подключаем кэш, то первый запрос должен уходить на МосБиржу, а последующие должны обращаться к кэшу.
Есть такой объект - Кэшменеджер CacheManager, который отвечает за создание кэша. Он создается с помощью зависимости
из pom.xml spring-boot-starter-cache
Если всё отрабатывает нормально то в нем создаются две коллекции из методов getCorporateBonds и getGovBonds.
!!!!ВНИМАНИЕ !!!
*** Кэшируемые методы не должны вызываться из того же класса в котором они написаны!!!
AOP Спринга и PROXY Спринга так не работает. Оно будет работать только тогда, когда мы дергаем эти
методы из другого компонента (из вне)!!!
Также по этой причине в Спринге не работает @Transactional когда вызываем метод с этой аннотацией в другом методе,
но в этом же классе!!!
Есть ДВА варианта решения:
1) вынести эти методы в отдельный компонент, чтобы дергать их из другого компонента
2) заинжектить бин этого класса, где находятся эти методы, в самого себя. Тут есть пример:
(.....
https://stackoverflow.com/questions/3423972/spring-transaction-method-call-by-the-method-within-the-same-class-does-not-wo
public class SBMWSBL {
    private SBMWSBL self;

    @Autowired
    private ApplicationContext applicationContext;

    @PostConstruct
    public void postContruct(){
        self = applicationContext.getBean(SBMWSBL.class);
    }

    // ...
}
......)

Лучше использовать способ номер 1). Его и используем. Вынесли эти кешируемые методы в другой класс BondRepository.
!!!!!

Чтобы решить проблему - время жизни нашего кэша, нужно использовать отдельную имплементацию Спринг кэш -
кофеин caffeine. Добавим зависимость в pom.xml
И всю остальную работу сделает за нас стартер - Спринг теперь будет использовать не свой стандартный кэш ConcurrentHashMap,
а реализацию caffeine. Никаких дополнительных бинов создавать не нужно.
caffeine можно настраивать. И сделаем это в application.yml
spring:
  cache:
    caffeine:
      spec: maximumSize=48,expireAfterAccess=1h

expireAfterAccess=1h - время жизни кэша 1 час
maximumSize=48 - максимальный размер 48, потом кэш удаляет самые старые записи перезаписывая на новые.
Указывает максимальное количество записей, которые может содержать кэш, это когда кэш создается, то
это одна запись. Забранные из Биржи данные будут все.
----------------------------------------------------------------------------------------------------

